<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import Namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
// Note: This is a generated file. The source is in Colors.tt
using PoshCode.Pansies.ColorSpaces.Conversions;
using PoshCode.Pansies.ColorSpaces;

namespace PoshCode.Pansies
{
<#
	var document2 = new XmlDocument();
	var file2 = Host.ResolvePath("./ColorSpaces/ColorSpaces.xml");
	document2.Load(file2);
	var colorSpaces = document2.SelectSingleNode("colorSpaces");

	foreach (XmlNode space in colorSpaces)
	{
		var className = space.Attributes["name"].Value;
		var points = space.SelectNodes("dataPoints/dataPoint");
#>
	public partial class <#=className#>Color : PoshCode.Pansies.ColorSpaces.<#=className#>
	{
		public <#=className#>Color(){}

		// IColorSpace means they have To<IColorSpace>() and Initialize(IRgb)
		// But PowerShell doesn't handle generic methods properly
		// And we want cast capability
<#
		foreach (XmlNode otherSpace in colorSpaces)
		{
			var otherClassName = otherSpace.Attributes["name"].Value;
#>
		public <#=className#>Color(I<#=otherClassName#> <#=otherClassName.ToLower()#>)
		{
<# 			if (otherClassName == className)
			{
#>
			Ordinals = <#=otherClassName.ToLower()#>.Ordinals;
<#
			}
			else
			{
#>
			Initialize(<#=otherClassName.ToLower()#>.ToRgb());
<#
			}
#>
		}

<#
		if (otherClassName != "Rgb")
		{
#>
		public I<#=otherClassName#> To<#=otherClassName#>()
		{
			return new <#=otherClassName#>Color(this);
		}
<#
		}
			if (otherClassName != className)
			{
#>
		public static implicit operator <#=className#>Color(<#=otherClassName#> <#=otherClassName.ToLower()#>)
		{
			return new <#=className#>Color(<#=otherClassName.ToLower()#>);
		}

		public static implicit operator <#=className#>Color(<#=otherClassName#>Color <#=otherClassName.ToLower()#>)
		{
			return new <#=className#>Color(<#=otherClassName.ToLower()#>);
		}
<#
			}
		}
#>
	}
<#
	}
#>
}
