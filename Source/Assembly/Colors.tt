<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>// Note: This is a generated file.
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="EnvDTE" #> 
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using ColorMine.ColorSpaces.Conversions;
using ColorMine.ColorSpaces;

namespace PoshCode.Pansies
{
<#
	var serviceProvider = (IServiceProvider)Host;
	var dte = (DTE)serviceProvider.GetService(typeof(DTE));

	var projectItem = (ProjectItem)dte.Solution.FindProjectItem("ColorSpaces.cs");
    var codeModel = (FileCodeModel)projectItem.FileCodeModel;

	var elements = (CodeElements)codeModel.CodeElements;
	var nameSpace = (CodeNamespace)elements.OfType<CodeNamespace>().First();
    var classes = (IEnumerable<CodeClass>)nameSpace.Children.OfType<CodeClass>();

	foreach(var codeClass in classes)
    {
		var className = codeClass.Name;
		var points = codeClass.Members;
#>
    public partial class <#=className#>Color : ColorMine.ColorSpaces.<#=className#>
    {
		public <#=className#>Color(){}

		// IColorSpace means they have To<IColorSpace>() and Initialize(IRgb)
		// But PowerShell doesn't handle generic methods properly
		// And we want cast capability

<#  foreach(var otherClass in classes) { #>
		public <#=className#>Color(I<#=otherClass.Name#> <#=otherClass.Name.ToLower()#>)
		{
<# 	if(otherClass.Name == className) { #>
			Ordinals = <#=otherClass.Name.ToLower()#>.Ordinals;
<#  } else { #>
			Initialize(<#=otherClass.Name.ToLower()#>.ToRgb());
<#  } #>
		}

<# if(otherClass.Name != "Rgb") { #>
        public I<#=otherClass.Name#> To<#=otherClass.Name#>()
		{
            return new <#=otherClass.Name#>Color(this);
		}
<# } #>
<#
    } 
#>
    }

<# } #>
}