<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>// Note: This is a generated file.
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import Namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
using ColorMine.ColorSpaces.Conversions;
using ColorMine.ColorSpaces;

namespace PoshCode.Pansies
{
<#
	var document2 = new XmlDocument();
	var file2 = Host.ResolvePath("../../../ColorMine/ColorMine/ColorSpaces/ColorSpaces.xml");
	document2.Load(file2);
	var colorSpaces = document2.SelectSingleNode("colorSpaces");

	foreach (XmlNode space in colorSpaces)
	{
		var className = space.Attributes["name"].Value;
		var points = space.SelectNodes("dataPoints/dataPoint");
#>
    public partial class <#=className#>Color : ColorMine.ColorSpaces.<#=className#>
    {
		public <#=className#>Color(){}

		// IColorSpace means they have To<IColorSpace>() and Initialize(IRgb)
		// But PowerShell doesn't handle generic methods properly
		// And we want cast capability
<# 
	foreach (XmlNode otherSpace in colorSpaces)
	{
		var otherClassName = otherSpace.Attributes["name"].Value;
#>
		public <#=className#>Color(I<#=otherClassName#> <#=otherClassName.ToLower()#>)
		{
<# 	if(otherClassName == className) { #>
			Ordinals = <#=otherClassName.ToLower()#>.Ordinals;
<#  } else { #>
			Initialize(<#=otherClassName.ToLower()#>.ToRgb());
<#  } #>
		}

<# if(otherClassName != "Rgb") { #>
        public I<#=otherClassName#> To<#=otherClassName#>()
		{
            return new <#=otherClassName#>Color(this);
		}
<# } 
   } 
#>
    }
<# } #>
}