<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import Namespace="System.Xml" #>
<#@ import Namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var document = new XmlDocument();
	var file = Host.ResolvePath("ColorSpaces.xml");
	document.Load(file);
	var colorSpaces = document.SelectNodes("colorSpaces/colorSpace");
#>
<#@ output extension=".cs" #>// Note: This is a generated file.
using PoshCode.Pansies.ColorSpaces.Conversions;
using System.Linq;

namespace PoshCode.Pansies.ColorSpaces
{
	public interface IHue
	{
		double H { get; set; }
	}
<# foreach (XmlNode space in colorSpaces) {
var spaceName = space.Attributes["name"].Value;
var points = space.SelectNodes("dataPoints/dataPoint");#>
	public interface I<#=spaceName#> : IColorSpace
	{
<# foreach(XmlNode  point in points) {
#>
		double <#=point.Attributes["label"].Value#> { get; set; }
<# } #>
	}

	public class <#=spaceName#> : ColorSpace, I<#=spaceName#><# if(space.SelectNodes("dataPoints/dataPoint[@label='H']").Count > 0) { #>, IHue<# } #>
	{
<# foreach(XmlNode point in points) { #>
		public double <#=point.Attributes["label"].Value#> { get; set; }
<# } #>

		public <#=spaceName#>() { }

		public <#=spaceName#>(<# foreach(XmlNode point in points) { #>double <#=point.Attributes["label"].Value.ToLower()#><# if(point.Attributes != points[points.Count - 1].Attributes) { #>, <# } #><# } #>)
		{
<# foreach(XmlNode point in points) { #>
			<#=point.Attributes["label"].Value#> = <#=point.Attributes["label"].Value.ToLower()#>;
<# } #>
		}

		public <#=spaceName#>(IColorSpace color)
		{
			Ordinals = color.To<<#=spaceName#>>().Ordinals;
		}

		public <#=spaceName#>(double[] ordinals)
		{
			Ordinals = ordinals;
		}

		public override void Initialize(IRgb color)
		{
			<#=spaceName#>Converter.ToColorSpace(color,this);
		}

		public override string ToString()
		{
			return string.Join("; ", new []{
<# foreach(XmlNode point in points) { #>
			   "<#=point.Attributes["label"].Value#>=" + <#=point.Attributes["label"].Value#>,
<# } #>
			});
		}

		public override IRgb ToRgb()
		{
			return <#=spaceName#>Converter.ToColor(this);
		}

		public <#=spaceName#>[] Rainbow(int size = 7)
		{
			return Gradient.GetRainbow(this, size).ToArray();
		}

		internal override string[] OrdinalLabels { get; } = new[] { <# foreach(XmlNode point in points) { #>"<#=point.Attributes["label"].Value#>",<# } #> };

		public override sealed double[] Ordinals
		{
			get
			{
				return new[] {<# foreach(XmlNode point in points) { #> <#=point.Attributes["label"].Value#>,<# } #> };
			}
			set
			{
<# var counter = 0;
   foreach(XmlNode point in points) { #>
				<#=point.Attributes["label"].Value#> = value[<#=counter++#>];
<# } #>
			}
		}
	}
<# } #>}